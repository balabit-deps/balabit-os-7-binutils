Backport of:

From 0930cb3021b8078b34cf216e79eb8608d017864f Mon Sep 17 00:00:00 2001
From: Alan Modra <amodra@gmail.com>
Date: Sat, 13 Oct 2018 22:03:02 +1030
Subject: [PATCH] _bfd_clear_contents bounds checking

This PR shows a fuzzed binary triggering a segfault via a bad
relocation in .debug_line.  It turns out that unlike normal
relocations applied to a section, the linker applies those with
symbols from discarded sections via _bfd_clear_contents without
checking that the relocation is within the section bounds.  The same
thing now happens when reading debug sections since commit
a4cd947aca23, the PR23425 fix.

	PR 23770
	PR 23425
	* reloc.c (_bfd_clear_contents): Replace "location" param with
	"buf" and "off".  Bounds check "off".  Return status.
	* cofflink.c (_bfd_coff_generic_relocate_section): Update
	_bfd_clear_contents call.
	* elf-bfd.h (RELOC_AGAINST_DISCARDED_SECTION): Likewise.
	* elf32-arc.c (elf_arc_relocate_section): Likewise.
	* elf32-i386.c (elf_i386_relocate_section): Likewise.
	* elf32-metag.c (metag_final_link_relocate): Likewise.
	* elf32-nds32.c (nds32_elf_get_relocated_section_contents): Likewise.
	* elf32-ppc.c (ppc_elf_relocate_section): Likewise.
	* elf32-visium.c (visium_elf_relocate_section): Likewise.
	* elf64-ppc.c (ppc64_elf_relocate_section): Likewise.
	* elf64-x86-64.c *(elf_x86_64_relocate_section): Likewise.
	* libbfd-in.h (_bfd_clear_contents): Update prototype.
	* libbfd.h: Regenerate.
---
 bfd/ChangeLog      | 20 ++++++++++++++++++++
 bfd/cofflink.c     |  2 +-
 bfd/elf-bfd.h      |  2 +-
 bfd/elf32-arc.c    |  2 +-
 bfd/elf32-i386.c   |  2 +-
 bfd/elf32-metag.c  |  2 +-
 bfd/elf32-nds32.c  |  8 ++++----
 bfd/elf32-ppc.c    |  2 +-
 bfd/elf32-visium.c |  2 +-
 bfd/elf64-ppc.c    |  2 +-
 bfd/elf64-x86-64.c |  2 +-
 bfd/libbfd-in.h    |  4 ++--
 bfd/libbfd.h       |  4 ++--
 bfd/reloc.c        | 19 +++++++++++++------
 14 files changed, 50 insertions(+), 23 deletions(-)

#diff --git a/bfd/ChangeLog b/bfd/ChangeLog
#index 68c1ff665be..e9696ee3143 100644
#--- a/bfd/ChangeLog
#+++ b/bfd/ChangeLog
#@@ -1,3 +1,23 @@
#+2018-10-13  Alan Modra  <amodra@gmail.com>
#+
#+	PR 23770
#+	PR 23425
#+	* reloc.c (_bfd_clear_contents): Replace "location" param with
#+	"buf" and "off".  Bounds check "off".  Return status.
#+	* cofflink.c (_bfd_coff_generic_relocate_section): Update
#+	_bfd_clear_contents call.
#+	* elf-bfd.h (RELOC_AGAINST_DISCARDED_SECTION): Likewise.
#+	* elf32-arc.c (elf_arc_relocate_section): Likewise.
#+	* elf32-i386.c (elf_i386_relocate_section): Likewise.
#+	* elf32-metag.c (metag_final_link_relocate): Likewise.
#+	* elf32-nds32.c (nds32_elf_get_relocated_section_contents): Likewise.
#+	* elf32-ppc.c (ppc_elf_relocate_section): Likewise.
#+	* elf32-visium.c (visium_elf_relocate_section): Likewise.
#+	* elf64-ppc.c (ppc64_elf_relocate_section): Likewise.
#+	* elf64-x86-64.c *(elf_x86_64_relocate_section): Likewise.
#+	* libbfd-in.h (_bfd_clear_contents): Update prototype.
#+	* libbfd.h: Regenerate.
#+
# 2018-10-09  Egeyar Bagcioglu  <egeyar.bagcioglu@oracle.com>
# 
# 	* elflink.c (elf_link_output_extsym): Do not place symbols into a
--- a/bfd/cofflink.c
+++ b/bfd/cofflink.c
@@ -3080,7 +3080,7 @@ _bfd_coff_generic_relocate_section (bfd
       if (sec != NULL && discarded_section (sec))
 	{
 	  _bfd_clear_contents (howto, input_bfd, input_section,
-			       contents + (rel->r_vaddr - input_section->vma));
+			       contents, rel->r_vaddr - input_section->vma);
 	  continue;
 	}
 
--- a/bfd/elf-bfd.h
+++ b/bfd/elf-bfd.h
@@ -2793,7 +2793,7 @@ extern asection _bfd_elf_large_com_secti
   {									\
     int i_;								\
     _bfd_clear_contents (howto, input_bfd, input_section,		\
-			 contents + rel[index].r_offset);		\
+			 contents, rel[index].r_offset);		\
 									\
     if (bfd_link_relocatable (info)					\
 	&& (input_section->flags & SEC_DEBUGGING))			\
--- a/bfd/elf32-arc.c
+++ b/bfd/elf32-arc.c
@@ -1533,7 +1533,7 @@ elf_arc_relocate_section (bfd *			  outp
       if (sec != NULL && discarded_section (sec))
 	{
 	  _bfd_clear_contents (howto, input_bfd, input_section,
-			       contents + rel->r_offset);
+			       contents, rel->r_offset);
 	  rel->r_offset = rel->r_offset;
 	  rel->r_info = 0;
 	  rel->r_addend = 0;
--- a/bfd/elf32-i386.c
+++ b/bfd/elf32-i386.c
@@ -2193,7 +2193,7 @@ elf_i386_relocate_section (bfd *output_b
       if (sec != NULL && discarded_section (sec))
 	{
 	  _bfd_clear_contents (howto, input_bfd, input_section,
-			       contents + rel->r_offset);
+			       contents, rel->r_offset);
 	  wrel->r_offset = rel->r_offset;
 	  wrel->r_info = 0;
 	  wrel->r_addend = 0;
--- a/bfd/elf32-metag.c
+++ b/bfd/elf32-metag.c
@@ -1393,7 +1393,7 @@ metag_final_link_relocate (reloc_howto_t
 					      rel, relend, howto, contents) \
   {									\
     _bfd_clear_contents (howto, input_bfd, input_section,		\
-			 contents + rel->r_offset);			\
+			 contents, rel->r_offset);			\
 									\
     if (bfd_link_relocatable (info)					\
 	&& (input_section->flags & SEC_DEBUGGING))			\
--- a/bfd/elf32-nds32.c
+++ b/bfd/elf32-nds32.c
@@ -12771,14 +12771,14 @@ nds32_elf_get_relocated_section_contents
 	  symbol = *(*parent)->sym_ptr_ptr;
 	  if (symbol->section && discarded_section (symbol->section))
 	    {
-	      bfd_byte *p;
+	      bfd_vma off;
 	      static reloc_howto_type none_howto
 		= HOWTO (0, 0, 0, 0, FALSE, 0, complain_overflow_dont, NULL,
 			 "unused", FALSE, 0, 0, FALSE);
 
-	      p = data + (*parent)->address * bfd_octets_per_byte (input_bfd);
-	      _bfd_clear_contents ((*parent)->howto, input_bfd, input_section,
-				   p);
+	      off = (*parent)->address * bfd_octets_per_byte (input_bfd);
+	      _bfd_clear_contents ((*parent)->howto, input_bfd,
+				   input_section, data, off);
 	      (*parent)->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;
 	      (*parent)->addend = 0;
 	      (*parent)->howto = &none_howto;
--- a/bfd/elf32-ppc.c
+++ b/bfd/elf32-ppc.c
@@ -7779,7 +7779,7 @@ ppc_elf_relocate_section (bfd *output_bf
 	    howto = ppc_elf_howto_table[r_type];
 
 	  _bfd_clear_contents (howto, input_bfd, input_section,
-			       contents + rel->r_offset);
+			       contents, rel->r_offset);
 	  wrel->r_offset = rel->r_offset;
 	  wrel->r_info = 0;
 	  wrel->r_addend = 0;
--- a/bfd/elf32-visium.c
+++ b/bfd/elf32-visium.c
@@ -617,7 +617,7 @@ visium_elf_relocate_section (bfd *output
 	     or sections discarded by a linker script, we just want the
 	     section contents zeroed.  Avoid any special processing.  */
 	  _bfd_clear_contents (howto, input_bfd, input_section,
-			       contents + rel->r_offset);
+			       contents, rel->r_offset);
 
 	  rel->r_info = 0;
 	  rel->r_addend = 0;
--- a/bfd/elf64-ppc.c
+++ b/bfd/elf64-ppc.c
@@ -13530,7 +13530,7 @@ ppc64_elf_relocate_section (bfd *output_
 	{
 	  _bfd_clear_contents (ppc64_elf_howto_table[r_type],
 			       input_bfd, input_section,
-			       contents + rel->r_offset);
+			       contents, rel->r_offset);
 	  wrel->r_offset = rel->r_offset;
 	  wrel->r_info = 0;
 	  wrel->r_addend = 0;
--- a/bfd/elf64-x86-64.c
+++ b/bfd/elf64-x86-64.c
@@ -2487,7 +2487,7 @@ elf_x86_64_relocate_section (bfd *output
       if (sec != NULL && discarded_section (sec))
 	{
 	  _bfd_clear_contents (howto, input_bfd, input_section,
-			       contents + rel->r_offset);
+			       contents, rel->r_offset);
 	  wrel->r_offset = rel->r_offset;
 	  wrel->r_info = 0;
 	  wrel->r_addend = 0;
--- a/bfd/libbfd-in.h
+++ b/bfd/libbfd-in.h
@@ -674,8 +674,9 @@ extern bfd_reloc_status_type _bfd_reloca
   (reloc_howto_type *, bfd *, bfd_vma, bfd_byte *);
 
 /* Clear a given location using a given howto.  */
-extern void _bfd_clear_contents (reloc_howto_type *howto, bfd *input_bfd,
-				 asection *input_section, bfd_byte *location);
+extern bfd_reloc_status_type _bfd_clear_contents
+  (reloc_howto_type *howto, bfd *input_bfd, asection *input_section,
+   bfd_byte *buf, bfd_vma off);
 
 /* Link stabs in sections in the first pass.  */
 
--- a/bfd/libbfd.h
+++ b/bfd/libbfd.h
@@ -679,8 +679,9 @@ extern bfd_reloc_status_type _bfd_reloca
   (reloc_howto_type *, bfd *, bfd_vma, bfd_byte *);
 
 /* Clear a given location using a given howto.  */
-extern void _bfd_clear_contents (reloc_howto_type *howto, bfd *input_bfd,
-				 asection *input_section, bfd_byte *location);
+extern bfd_reloc_status_type _bfd_clear_contents
+  (reloc_howto_type *howto, bfd *input_bfd, asection *input_section,
+   bfd_byte *buf, bfd_vma off);
 
 /* Link stabs in sections in the first pass.  */
 
--- a/bfd/reloc.c
+++ b/bfd/reloc.c
@@ -1604,23 +1604,29 @@ _bfd_relocate_contents (reloc_howto_type
    relocations against discarded symbols, to make ignorable debug or unwind
    information more obvious.  */
 
-void
+bfd_reloc_status_type
 _bfd_clear_contents (reloc_howto_type *howto,
 		     bfd *input_bfd,
 		     asection *input_section,
-		     bfd_byte *location)
+		     bfd_byte *buf,
+		     bfd_vma off)
 {
   int size;
   bfd_vma x = 0;
+  bfd_byte *location;
+
+  if (!bfd_reloc_offset_in_range (howto, input_bfd, input_section, off))
+    return bfd_reloc_outofrange;
 
   /* Get the value we are going to relocate.  */
+  location = buf + off;
   size = bfd_get_reloc_size (howto);
   switch (size)
     {
     default:
       abort ();
     case 0:
-      return;
+      return bfd_reloc_ok;
     case 1:
       x = bfd_get_8 (input_bfd, location);
       break;
@@ -1672,6 +1678,7 @@ _bfd_clear_contents (reloc_howto_type *h
 #endif
       break;
     }
+  return bfd_reloc_ok;
 }
 
 /*
@@ -8211,14 +8218,14 @@ bfd_generic_get_relocated_section_conten
 
 	  if (symbol->section && discarded_section (symbol->section))
 	    {
-	      bfd_byte *p;
+	      bfd_vma off;
 	      static reloc_howto_type none_howto
 		= HOWTO (0, 0, 0, 0, FALSE, 0, complain_overflow_dont, NULL,
 			 "unused", FALSE, 0, 0, FALSE);
 
-	      p = data + (*parent)->address * bfd_octets_per_byte (input_bfd);
-	      _bfd_clear_contents ((*parent)->howto, input_bfd, input_section,
-				   p);
+	      off = (*parent)->address * bfd_octets_per_byte (input_bfd);
+	      _bfd_clear_contents ((*parent)->howto, input_bfd,
+				   input_section, data, off);
 	      (*parent)->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;
 	      (*parent)->addend = 0;
 	      (*parent)->howto = &none_howto;
